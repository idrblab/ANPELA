% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/FC_PTI.R
\name{FC_PTI}
\alias{FC_PTI}
\title{Flow Cytometry Pseudotime Trajectory Inference}
\usage{
FC_PTI(
  name = "result",
  datapath,
  technique = "FC",
  mergeM = "Fixed",
  fixedNum = 200,
  compensationM = c("AutoSpill", "FlowCore", "MetaCyto", "None"),
  transformationM = c("Arcsinh Transformation", "Asinh with Non-negative Value",
    "Asinh with Randomized Negative Value", "Biexponential Transformation",
    "Box-Cox Transformation", "FlowVS Transformation", "Hyperlog Transformation",
    "Linear Transformation", "Ln Transformation", "Log Transformation",
    "Logicle Transformation", "Quadratic Transformation", "Split Scale Transformation",
    "Truncate Transformation", "Centered Log Ratio Transformation", "None"),
  normalizationM = c("GaussNorm", "WarpSet", "ZScore", "Mean Normalization",
    "Min-max Normalization", "None"),
  signalcleanM = c("FlowAI", "FlowClean", "FlowCut", "PeacoQC", "None"),
  workflow = NULL,
  spillpath = NULL,
  FSC = "FSC-H",
  SSC = "SSC-H",
  control.dir = NULL,
  control.def.file = NULL,
  arcsinha = 0,
  arcsinhb = 1/150,
  arcsinhc = 0,
  anna = 0,
  annb = 1/150,
  annc = 0,
  annthreshold = 1,
  arna = 0,
  arnb = 1/150,
  arnc = 0,
  arnthreshold = 1,
  bepa = 0.5,
  bepb = 1,
  bepc = 0.5,
  bepd = 1,
  bepf = 0,
  bepw = 0,
  tol = .Machine$double.eps^0.25,
  maxit = as.integer(5000),
  hpla = 1,
  hplb = 1,
  lineara = 2,
  linearb = 0,
  lntr = 1,
  lntd = 1,
  logbase = 10,
  logr = 1,
  logd = 1,
  lgtw = 0.5,
  lgtt = 262144,
  lgtm = 4.5,
  lgta = 0,
  Quadratica = 1,
  Quadraticb = 1,
  Quadraticc = 0,
  Truncatea = 1,
  Segment = 200,
  Segment2 = 200,
  min_cells = 3,
  max_bins = 10,
  step = 10,
  excludedColumn = NULL,
  TIM = NULL,
  pathwayhierarchy = NULL,
  clustering.var = NULL,
  cores = parallel::detectCores()/2,
  save_processed_res = "one_folder",
  savepath = "./ANPELA_res"
)
}
\arguments{
\item{name}{Character, the filename of the RData file when the "save_processed_res" parameter is set to "one_RData", and the filename of all the files in the "assess_res" folder which will store the assessment results.}

\item{datapath}{Character, the absolute path of the folder storing the FCS raw data files and metadata file.}

\item{technique}{Character, the technique type used in acquiring the SCP data.}

\item{mergeM}{Character, the method of merging multiple FCS files. When multiple FCS files are selected, cells can be combined using one of the four different methods including "Fixed", "Ceil", "All" and "Min".
\if{html}{\out{<br>}}\strong{Fixed}: a fixed num (specified by fixedNum) of cells are sampled (with replacement when the total number of cell is less than fixedNum) from each FCS file and combined for analysis.
\if{html}{\out{<br>}}\strong{Ceil}: up to a fixed number (specified by fixedNum) of cells are sampled without replacement from each FCS file and combined for analysis.
\if{html}{\out{<br>}}\strong{All}: all cells from each FCS file are combined for analysis.
\if{html}{\out{<br>}}\strong{Min}: The minimum number of cells among all the selected FCS files are sampled from each FCS file and combined for analysis.}

\item{fixedNum}{Integer, the fixed number of cells to be extracted from each FCS file.}

\item{compensationM}{Character, the method(s) of compensation for flow cytometry data including "AutoSpill", "FlowCore", "MetaCyto" and "None". Compensation refers to the processing step of removing unwanted spillover resulting from signal crosstalk and spectral overlap across detection channels.
\if{html}{\out{<br>}}For details of each method, please refer to the \strong{Methods Introduction}.}

\item{transformationM}{Character, the method(s) of transformation for flow cytometry data including "Arcsinh Transformation", "Asinh with Non-negative Value", "Asinh with Randomized Negative Value", "Biexponential Transformation", "Box-Cox Transformation", "Centered Log Ratio Transformation", "FlowVS Transformation", "Hyperlog Transformation", "Linear Transformation", "Ln Transformation", "Log Transformation", "Logicle Transformation", "Quadratic Transformation", "Split Scale Transformation", "Truncate Transformation"and "None". Transformation refers to the processing step of adjusting the data with a heavily skewed distribution to a normal distribution.
\if{html}{\out{<br>}}For details of each method, please refer to the \strong{Methods Introduction}.}

\item{normalizationM}{Character, the method(s) of normalization for flow cytometry data, including "GaussNorm", "Mean Normalization", "Min-max Normalization", "WarpSet", "ZScore" and "None". Normalization refers to the processing step of eliminating signal decay and technical variability across all files and batches over long-term data acquisition.
\if{html}{\out{<br>}}For details of each method, please refer to the \strong{Methods Introduction}.}

\item{signalcleanM}{Character, the method(s) of signal clean for flow cytometry data, including "FlowAI", "FlowClean", "FlowCut", "PeacoQC" and "None". Signal cleaning refers to the processing step of identifying and removing abrupt signal shifts and changes that derive from (i) abrupt changes in the flow rate, (ii) clogs within the capillary tubes, (iii) temporary disruptions in cytometer fluidics, and (iv) unstable data acquisition.
\if{html}{\out{<br>}}For details of each method, please refer to the \strong{Methods Introduction}.}

\item{workflow}{Character, the combinations of data processing methods specified by users according to their research interests.
\if{html}{\out{<br>}}It is a vector includes one or more method combinations, typically in the format of "compensation method name_ transformation method name_ normalization method name_ signal clean method name ", for example: c("None_Biexponential Transformation_None_None","CytoSpill_FlowVS Transformation_None_FlowCut").}

\item{spillpath}{Character, the absolute filepath(s) of compensation beads or cells. The spillover information for a particular experiment is often obtained by running several tubes of beads or cells stained with a single color that can then be used to determine a spillover matrix for use.
\if{html}{\out{<br>}}Only needed when "FlowCore" is included in the argument of "compensationM". The filenames of the FCS files must correspond to the names of stain channels. If the original FCS files contain a pre-calculated spillover matrix as the value of the $SPILLOVER, $spillover or $SPILL keywords, this can be set as NULL.}

\item{FSC}{Character, the name of the forward scatter parameter.
\if{html}{\out{<br>}}Only needed when "FlowCore" is included in the argument of "compensationM".}

\item{SSC}{Character, the name of the side scatter parameter.
\if{html}{\out{<br>}}Only needed when "FlowCore" is included in the argument of "compensationM".}

\item{control.dir}{Character, the absolute path of the folder storing the FCS files of single-color controls.
\if{html}{\out{<br>}}Only needed when "AutoSpill" is included in the argument of "compensationM".}

\item{control.def.file}{Character, the absolute filepath of the CSV file defining the filenames and corresponding channels of the single-color controls.
\if{html}{\out{<br>}}Only needed when "AutoSpill" is included in the argument of "compensationM".}

\item{arcsinha}{Double, the argument offset coefficient ‘a’ in equation y = asinh(a + b*x) + c.
\if{html}{\out{<br>}}Only needed when ‘Arcsinh Transformation’ is included in the parameter of ‘transformationM’.}

\item{arcsinhb}{Double, the input scaling coefficient ‘b’ in equation y = asinh(a + b*x) + c.
\if{html}{\out{<br>}}Only needed when ‘Arcsinh Transformation’ is included in the parameter of ‘transformationM’.}

\item{arcsinhc}{Double, the output offset coefficient ‘c’ in equation y = asinh(a + b*x) + c.
\if{html}{\out{<br>}}Only needed when ‘Arcsinh Transformation’ is included in the parameter of ‘transformationM’.}

\item{anna}{Double, the argument offset coefficient ‘a’ in equation y = asinh(a + b*x) + c.
\if{html}{\out{<br>}}Only needed when ‘Asinh with Non-negative Value’ is included in the parameter of ‘transformationM’.}

\item{annb}{Double, the input scaling coefficient ‘b’ in equation y = asinh(a + b*x) + c.
\if{html}{\out{<br>}}Only needed when ‘Asinh with Non-negative Value’ is included in the parameter of ‘transformationM’.}

\item{annc}{Double, the output offset coefficient ‘c’ in equation y = asinh(a + b*x) + c.
\if{html}{\out{<br>}}Only needed when ‘Asinh with Non-negative Value’ is included in the parameter of ‘transformationM’.}

\item{annthreshold}{Double, the input cutoff value ‘threshold’ below which the input x is replaced by the threshold itself before the asinh calculation.
\if{html}{\out{<br>}}Only needed when ‘Asinh with Non-negative Value’ is included in the parameter of ‘transformationM’.}

\item{arna}{Double, the argument offset coefficient ‘a’ in equation y = asinh(a + b*x) + c.
\if{html}{\out{<br>}}Only needed when ‘Asinh with Randomized Negative Value’ is included in the parameter of ‘transformationM’.}

\item{arnb}{Double, the input scaling coefficient ‘b’ in equation y = asinh(a + b*x) + c.
\if{html}{\out{<br>}}Only needed when ‘Asinh with Randomized Negative Value’ is included in the parameter of ‘transformationM’.}

\item{arnc}{Double, the output offset coefficient ‘c’ in equation y = asinh(a + b*x) + c.
\if{html}{\out{<br>}}Only needed when ‘Asinh with Randomized Negative Value’ is included in the parameter of ‘transformationM’.}

\item{arnthreshold}{Double, the input cutoff value ‘threshold’ below which the input x is replaced by a small random value before the asinh calculation.
\if{html}{\out{<br>}}Only needed when ‘Asinh with Randomized Negative Value’ is included in the parameter of ‘transformationM’.}

\item{bepa}{Double, the positive exponential scaling coefficient ‘a’ in equation y = a\emph{exp(b}(x-w)) - c\emph{exp(-d}(x-w)) + f.
\if{html}{\out{<br>}}Only needed when ‘Biexponential Transformation’ is included in the parameter of ‘transformationM’.}

\item{bepb}{Double, the positive exponential rate coefficient ‘b’ in equation y = a\emph{exp(b}(x-w)) - c\emph{exp(-d}(x-w)) + f.
\if{html}{\out{<br>}}Only needed when ‘Biexponential Transformation’ is included in the parameter of ‘transformationM’.}

\item{bepc}{Double, the negative exponential scaling coefficient ‘c’ in equation y = a\emph{exp(b}(x-w)) - c\emph{exp(-d}(x-w)) + f.
\if{html}{\out{<br>}}Only needed when ‘Biexponential Transformation’ is included in the parameter of ‘transformationM’.}

\item{bepd}{Double, the negative exponential rate coefficient ‘d’ in equation y = a\emph{exp(b}(x-w)) - c\emph{exp(-d}(x-w)) + f.
\if{html}{\out{<br>}}Only needed when ‘Biexponential Transformation’ is included in the parameter of ‘transformationM’.}

\item{bepf}{Double, the vertical offset coefficient ‘f’ in equation y = a\emph{exp(b}(x-w)) - c\emph{exp(-d}(x-w)) + f.
\if{html}{\out{<br>}}Only needed when ‘Biexponential Transformation’ is included in the parameter of ‘transformationM’.}

\item{bepw}{Double, the horizontal shift coefficient ‘w’ defining the center point in equation y = a\emph{exp(b}(x-w)) - c\emph{exp(-d}(x-w)) + f.
\if{html}{\out{<br>}}Only needed when ‘Biexponential Transformation’ is included in the parameter of ‘transformationM’.}

\item{tol}{Double, the numerical tolerance value ‘tol’ used by the root-finding algorithm during the inversion of the function.
\if{html}{\out{<br>}}Only needed when ‘Biexponential Transformation’ is included in the parameter of ‘transformationM’.}

\item{maxit}{Integer, the maximum iterations value ‘maxit’ allowed for the root-finding algorithm during the inversion of the function.
\if{html}{\out{<br>}}Only needed when ‘Biexponential Transformation’ is included in the parameter of ‘transformationM’.}

\item{hpla}{Double, the scaling parameter ‘a’ determining the overall compression level and transition characteristics.
\if{html}{\out{<br>}}Only needed when ‘Hyperlog Transformation’ is included in the parameter of ‘transformationM’.}

\item{hplb}{Double, the linear coefficient ‘b’ controlling the width of the linear region near zero.
\if{html}{\out{<br>}}Only needed when ‘Hyperlog Transformation’ is included in the parameter of ‘transformationM’.}

\item{lineara}{Double, the multiplicative factor "a" in equation y = a*x+b.
\if{html}{\out{<br>}}Only needed when "Linear Transformation" is included in the argument of "transformationM".}

\item{linearb}{Double, the additive factor "b" in equation y = a*x+b.
\if{html}{\out{<br>}}Only needed when "Linear Transformation" is included in the argument of "transformationM".}

\item{lntr}{Double, the numerator scaling coefficient ‘r’ in equation y = log(x) * (r / d).
\if{html}{\out{<br>}}Only needed when ‘Ln Transformation’ is included in the parameter of ‘transformationM’.}

\item{lntd}{Double, the denominator scaling coefficient ‘d’ in equation y = log(x) * (r / d).
\if{html}{\out{<br>}}Only needed when ‘Ln Transformation’ is included in the parameter of ‘transformationM’.}

\item{logbase}{Integer, the base of the Log Transformation.
\if{html}{\out{<br>}}Only needed when "Log Transformation" is included in the argument of "transformationM".}

\item{logr}{Double, the numerator scaling coefficient ‘r’ in equation y = log(x, logbase) * (r / d).
\if{html}{\out{<br>}}Only needed when ‘Log Transformation’ is included in the parameter of ‘transformationM’.}

\item{logd}{Double, the denominator scaling coefficient ‘d’ in equation y = log(x, logbase) * (r / d).
\if{html}{\out{<br>}} Only needed when ‘Log Transformation’ is included in the parameter of ‘transformationM’.}

\item{lgtw}{Double, the linear region width value ‘w’ defining the scale behavior near zero.
\if{html}{\out{<br>}} Only needed when ‘Logicle Transformation’ is included in the parameter of ‘transformationM’.}

\item{lgtt}{Double, the top-of-scale value ‘t’ representing the maximum expected input data value.
\if{html}{\out{<br>}} Only needed when ‘Logicle Transformation’ is included in the parameter of ‘transformationM’.}

\item{lgtm}{Double, the total display range ‘m’ setting the overall width of the transformed output scale.
\if{html}{\out{<br>}} Only needed when ‘Logicle Transformation’ is included in the parameter of ‘transformationM’.}

\item{lgta}{Double, the additional negative range ‘a’ controlling the extent of negative input values included in the display.
\if{html}{\out{<br>}} Only needed when ‘Logicle Transformation’ is included in the parameter of ‘transformationM’.}

\item{Quadratica}{Double, the quadratic coefficient "a" in equation y = a*x^2+b*x+c.
\if{html}{\out{<br>}}Only needed when "QuadraticTransform" is included in the argument of "transformationM".}

\item{Quadraticb}{Double, the linear coefficient "b" in equation y = a*x^2+b*x+c.
\if{html}{\out{<br>}}Only needed when "QuadraticTransform" is included in the argument of "transformationM".}

\item{Quadraticc}{Double, the intercept "c" in equation y = a*x^2+b*x+c.
\if{html}{\out{<br>}}Only needed when "QuadraticTransform" is included in the argument of "transformationM".}

\item{Truncatea}{Double, the value at which to truncate.
\if{html}{\out{<br>}}Only needed when "TruncateTransform" is included in the argument of "transformationM".}

\item{Segment}{Integer, the value specifying the number of events in each segment to be analyzed.
\if{html}{\out{<br>}}Only needed when ‘FlowClean is included in the parameter of ‘signalcleanM’.}

\item{Segment2}{Integer, the value representing the minimum number of cells a population must have to be included in analysis.
\if{html}{\out{<br>}}Only needed when ‘FlowClean is included in the parameter of ‘signalcleanM’.}

\item{min_cells}{Integer, the minimum amount of cells (nonzero values) that should be present in one bin.
\if{html}{\out{<br>}}Only needed when "PeacoQC" is included in the argument of "signalcleanM". Lowering this parameter can affect the robustness of the peak detection.}

\item{max_bins}{Integer, the maximum number of bins that can be used in the cleaning process.
\if{html}{\out{<br>}}Only needed when "PeacoQC" is included in the argument of "signalcleanM". If this value is lowered, larger bins will be made.}

\item{step}{Integer, the step in events_per_bin to which the parameter is reduced to.
\if{html}{\out{<br>}}Only needed when "PeacoQC" is included in the argument of "signalcleanM".}

\item{excludedColumn}{Character, the non-protein columns names of which accessed through the function "Getmarker".
\if{html}{\out{<br>}}It is a string separated by commas, typically in the format of "channel description (channel name)", for example: "gate_source(gate_source), cell_id(cell_id), sample_id(sample_id), Time(Time), Cell_length(Cell_length), DNA-1(DNA.1.Ir191.Dd)".}

\item{TIM}{Character, the method of trajectory inference for the processed data prior to performance assessment, consisted of trajectory reconstruction and data space representation, including "scorpius_distSpear", "scorpius_distPear", "scorpius_distEucl", "scorpius_distManh", "slingshot_tSNE", "slingshot_FLOWMAP", "prinCurves_tSNE", "slingshot_PCA", "slingshot_diffMaps", "prinCurves_diffMaps".}

\item{pathwayhierarchy}{Character, the absolute filepath of the pathway hierarchy file.}

\item{clustering.var}{Character, the vector naming channels to be used to calculate distances/differences between cells for clustering (if re-quested) and edge-drawing steps.
\if{html}{\out{<br>}}Only needed when ‘slingshot_FLOWMAP’ is included in the parameter of ‘TIM’.}

\item{cores}{Integer, the number of CPU cores to be employed for performing parallel computing.
\if{html}{\out{<br>}}To avoid memory explosion due to parallel computing, the default is the largest integers not greater than half of the number of CPU cores on the current host.}

\item{save_processed_res}{Character, the format of the data processing output files. "no" denotes that the results would not be saved. "one_folder" denotes that successfully processed results will be saved as separate RData files in the "process_res" folder. "one_RData" denotes that all processed results will be saved as one RData file in the "process_res" folder.}

\item{savepath}{Character, the absolute path of the folder which will store files of the assessment and processed results.}
}
\value{
the data processing and performance assessment output files, which are located in the \strong{process_res} and \strong{assess_res} folders, respectively.
\subsection{Results of Data Processing}{

The \strong{process_res} folder stores the results of various data processing workflows. The form of data processing output files is decided by the parameter \code{save_processed_res}: "no" denotes that the results would not be saved; "one_folder" denotes that successfully processed results will be saved as separate RData files in the "process_res" folder; "one_RData" denotes that all processed results will be saved as one RData file in the "process_res" folder [\emph{default ="one_folder"}].
}

\subsection{Results of Performance Assessment}{

The \strong{assess_res} folder stores the results of performance assessment, which includes 3 files:
\if{html}{\out{<br>}}(\strong{1}) \strong{_Ranking_Table.csv} contains the overall ranking results of all data processing workflows, where the "Rank" column represents the overall ranking, and the "Value" column shows the scores for different assessment criteria.
\if{html}{\out{<br>}}(\strong{2}) \strong{_Ranking_Figure.pdf} visualizes the overall ranking results to help users better understand the differences among various data processing workflows. Different colors represent different performance assessment levels: dark green indicates "superior," light green indicates "good," and red indicates "poor."
\if{html}{\out{<br>}}(\strong{3}) \strong{_assess.RData} contains 2 lists, "table" and "table2", providing the raw scores for different assessment criteria and performance assessment levels categorized by thresholds, respectively.
}

\subsection{Records}{

In addition, \strong{log.txt} and \strong{info_saved.RData} files are also generated simultaneously. \strong{log.txt} records the processing details while \strong{info_saved.RData} records the information related to "metadata" and "index_protein".
}
}
\description{
FC_PTI() enables high-throughput processing of SCP data acquired from FC using up to ~960 available workflows and subsequently assesses the performance of all processing workflows based on comprehensive criteria from the perspective of PTI studies, functioning similarly to a combination of FCprocess() and PTIassess(), while utilizing less memory during execution.
}
\examples{
\donttest{
}
}
